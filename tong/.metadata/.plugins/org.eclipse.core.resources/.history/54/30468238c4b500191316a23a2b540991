package MovableEntities_observer_pattern;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Timer;
import java.util.TimerTask;

import Dungeon.Dungeon;
import Entities.Door;
import Entities.Entity;
import Entities.Wall;
import Enums.Directions;
import Enums.PotionState;

public class Enemy extends MovableEntity implements PlayerObservers{
	
	private int rowNum[] = {-1,0,0,1};
	private int colNum[] = {0,1,-1,0};
//	static int interval;
//	static Timer timer;
	
	private int playerX;
	private int playerY;
	private PotionState playerPotionState;
	private boolean livingState = true;
	private Timer timer;
	
	
//	private ArrayList<Entity> neighbors[][] = new ArrayList<Entity>();
	
//	private Graph graph
	
    public Enemy(Dungeon dungeon, int x, int y) {
        super(dungeon, x, y);
        this.timer = new Timer();
    }

    /**
     * update enemy's target coordinate
     */
	@Override
	public void update(PlayerObservable player) {
		this.playerX = ((Player)player).getX();
		this.playerY = ((Player)player).getY();
		this.playerPotionState = ((Player)player).getPotionState();
		//chasePlayer();
	}

	
	/*
	 *  when player has buff, enemy run away
	 */
	public void runAway() {
		Timer timer = new Timer();
		TimerTask task = new TimerTask() {
			public void run() {
				if(!runX(playerX)) {
					if(!runY(playerY)){
						runX(playerX);
					}
				}
			}
		};
		timer.schedule(task, 1000, 1000);
		
	}
	
	public void enemyMovement() {
		Timer timer = new Timer();
		TimerTask task = new TimerTask() {
			public void run() {
				if(playerPotionState.equals(PotionState.ON)) {
					if(!runX(playerX)) {
						runY(playerY);
					}
				}else {
					ArrayList<Entity> path = getPath(playerX, playerY);
					path.remove(0);
		    		System.out.println("Search path!");
					if(path.size()<1) {
						dungeon.gg();
					}else{
						Entity e = path.get(0);
						
						System.out.println("move to "+ e.getX() + e.getY());
						moveOneStep(e.getX(), e.getY());
					}
				}
			}
		};
		timer.schedule(task, 1000, 1000);
	}
	
	// input board-row-col index
	public void moveOneStep(int x, int y) {
		if(this.getX()==x) {
			System.out.println("RUN");

			if((this.getY()-y) == 1) {
				this.moveUp();
			}else {
				this.moveDown();
			}
		}else if(this.getY()==y) {
			if((this.getX()-x) == 1) {
				this.moveLeft();
			}else {
				this.moveRight();
			}
			System.out.println("RUN");

		}else {
			System.out.println("Error!!!");
		}
		
	}

	public int[][] maze(){
		int maze[][] = new int[18][20];
		for(int i=0;i<18;i++) {
			for(int j=0;j<20;j++) {
				maze[i][j] = 0;
			}
		}
		for(Entity entity : dungeon.getEntities()) {
			if(entity instanceof Wall) {
				maze[entity.getY()][entity.getX()] = 1;
			}else if (entity instanceof Boulder) {
				maze[entity.getY()][entity.getX()] = 1;
			}else if(entity instanceof Door){
				if(!((Door) entity).isOpening()) {
					maze[entity.getY()][entity.getX()] = 1;
				}
			}
		}
		return maze;
	}
	
	// input board-row-col index
	public ArrayList<Entity> getNeighbors(int x, int y){
		ArrayList<Entity> neighbors = new ArrayList<>();
		for (int i = 0; i < 4; i++) {
		 	int row = x + rowNum[i];
		 	int col = y + colNum[i];
		 	Entity adj = new Entity(row,col);
		 	neighbors.add(adj);
	    }
		return neighbors;
	}
	
	// input matrix-row-col index
	public boolean isValid(int[][] maze, int x, int y) {
		if(x>=0 && x<18) {
			if(y>=0 && y<20) {
				if(maze[x][y]!=1) {
					return true;
				}
			}
		}
		return false;
	}
	
	public boolean findPath(int x, int y) {
		
		int[][] matrix = maze();
		boolean visited[][] = new boolean[18][20];
		for(int i = 0;i < 18;i++) {
			for(int j = 0; j < 20; j++) {
				visited[i][j] = false;
			}
		}
		
		
		Queue<Entity> queue = new LinkedList<Entity>();
		
		Entity e = this;
		queue.add(e);
		visited[e.getY()][e.getX()] = true;
		
		while(!queue.isEmpty()) {
			
			Entity curr = queue.remove();
//			System.out.println(curr);
			if(curr.getX()==x && curr.getY()==y) {
				System.out.println("Found Sink!");
				return true;
			}else {
//				Queue<Entity> new_path = new LinkedList<>();
//				if(path.size()==1) {
//					new_path.add(curr);
//				}else {
//					for(Queue<Entity> one_path : path) {
//						Queue<Entity> reverse_one_path = new LinkedList<>();
//						Entity front = reverse_one_path.remove();
//						if(front.getX()==curr.getX()&&front.getY()==curr.getY()) {
//							one_path.add(curr);
//							new_path = one_path;
//						}
//					}
//				}
				ArrayList<Entity> neighbors = getNeighbors(curr.getX(), curr.getY());
//				Queue<Entity> temp = queue;
				for(Entity neighbor : neighbors) {
//					System.out.println("(" + neighbor.getX()+","+ neighbor.getY()+")");
					if(isValid(matrix, neighbor.getY(), neighbor.getX()) && !visited[neighbor.getY()][neighbor.getX()]) {
						visited[neighbor.getY()][neighbor.getX()] = true;
//						Queue<Entity> add_path = new LinkedList<>();
//						add_path = new_path;
//						add_path.add(neighbor);
//			            path.add(add_path);
			            queue.add(neighbor);
//			    		System.out.println(queue);
					}	 
			     }
			}
		}
		return false;
	}
	
	public ArrayList<Entity> getPath(int x, int y){
		int[][] matrix = maze();
		boolean visited[][] = new boolean[18][20];
		for(int i = 0;i < 18;i++) {
			for(int j = 0; j < 20; j++) {
				visited[i][j] = false;
			}
		}
		ArrayList<ArrayList<Entity>> queue = new ArrayList<>();
		ArrayList<Entity> first_path = new ArrayList<>();
		first_path.add(this);
		queue.add(first_path);
		
		while(!queue.isEmpty()) {
			ArrayList<Entity> path = queue.get(0);
//			System.out.println(path);
			Entity e = path.get(path.size()-1);
//			System.out.println(e);

//			queue.remove(0);

//			System.out.println(e);
			if(e.getX()==x && e.getY()==y) {
				System.out.println("FOUND one path!");
				return path;
			}else {
				ArrayList<Entity> neighbors = getNeighbors(e.getX(), e.getY());
				for(Entity neighbor : neighbors) {
					if(isValid(matrix, neighbor.getY(), neighbor.getX()) && !visited[neighbor.getY()][neighbor.getX()]) {
						visited[neighbor.getY()][neighbor.getX()] = true;
						ArrayList<Entity> new_path = new ArrayList<>(path);
						new_path.add(neighbor);
						queue.add(new_path);
					}
				}
				queue.remove(path);
			}
		}
		return null;
	}

	@Override
    public boolean checkMoveLegal(Directions direction) {
		ArrayList<Entity> entities = dungeon.getEntities(this, getX(), getY());
		Entity entity = null;
		if (entities.size() == 0) return true;

		for(Entity e: entities) {
			if (e instanceof Boulder) {
	    		return false;
	    	}else {
	    		entity = e;
	    	}
			
		} 
		if (entity instanceof Wall) {
    		return false;
    	}else if (entity instanceof Door) {
			if (!((Door) entity).isOpening()) {
				return false;
			}
    	}else if (entity instanceof Enemy) {
    		return false;
		}else if (entity instanceof Boulder) {
    		return false;
		}
    	
		return true;
    }
	
	public boolean runX(int x) {
		if(this.getX() > x) {
			if(this.checkMoveLegal(Directions.RIGHT)) {
				this.checkMoveDirection(Directions.RIGHT);
				return true;
			}else {
				return false;
			}
		}else if(this.getX() < x){
			if(this.checkMoveLegal(Directions.LEFT)) {
				this.checkMoveDirection(Directions.LEFT);
				return true;
			}else {
				return false;
			}
		}else {
			return false;
		}
	}
	
	public boolean runY(int y) {
		if(this.getY() > y) {
			if(this.checkMoveLegal(Directions.DOWN)) {
				this.checkMoveDirection(Directions.DOWN);
				return true;
			}else {
				return false;
			}
		}else if(this.getY() < y){
			if(this.checkMoveLegal(Directions.UP)) {
				this.checkMoveDirection(Directions.UP);
				return true;
			}else {
				return false;
			}
		}else {
			if(this.checkMoveLegal(Directions.UP)) {
				System.out.println("!!!!!!!Go UP!!!!!!!");
				this.checkMoveDirection(Directions.UP);
			}else {
				this.checkMoveDirection(Directions.DOWN);
			}
		}
		return false;
	}

	public void goDie() {
		this.livingState = false;
	}
	
	public boolean isAlive() {
		return livingState;
	}
	public Timer getTimer() {
		return timer;
	}
	
}
