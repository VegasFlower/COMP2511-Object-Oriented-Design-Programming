/**
 *
 */
package unsw.venues;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Scanner;

import org.json.JSONArray;
import org.json.JSONObject;

/**
 * Venue Hire System for COMP2511.
 *
 * A basic prototype to serve as the "back-end" of a venue hire system. Input
 * and output is in JSON format.
 *
 * @author Robert Clifton-Everest
 *
 */
public class VenueHireSystem {

    /**
     * Constructs a venue hire system. Initially, the system contains no venues,
     * rooms, or bookings.
     */
	
	private ArrayList<Venue> venues;
//	private ArrayList<Room> rooms;
	private ArrayList<Booking> bookings;
	
    public VenueHireSystem() {
        // TODO Auto-generated constructor stub
    	venues = new ArrayList<Venue>();
    	bookings = new ArrayList<Booking>();
//    	rooms = new ArrayList<Room>();
    }

    
    /**
     * 
     * @param json
     */
    private void processCommand(JSONObject json) {
        switch (json.getString("command")) {

        case "room":
            String venue = json.getString("venue");
            String room = json.getString("room");
            String size = json.getString("size");
            addRoom(venue, room, size);
            break;

        case "request":
            String id = json.getString("id");
            LocalDate start = LocalDate.parse(json.getString("start"));
            LocalDate end = LocalDate.parse(json.getString("end"));
            int small = json.getInt("small");
            int medium = json.getInt("medium");
            int large = json.getInt("large");
            JSONObject result = request(id, start, end, small, medium, large);
            System.out.println(result.toString());
            break;

        // TODO Implement other commands

        case "change":
        	String id1 = json.getString("id");
        	LocalDate start1 = LocalDate.parse(json.getString("start"));
        	LocalDate end1 = LocalDate.parse(json.getString("end"));
        	int small1 = json.getInt("small");
            int medium1 = json.getInt("medium");
            int large1 = json.getInt("large");
            JSONObject result1 = change(id1, start1, end1, small1, medium1, large1);
            System.out.println(result1.toString());
        	break;
        	
        case "cancel":
        	String id2 = json.getString("id");
        	JSONObject result2 = cancel(id2);
        	System.out.println(result2.toString());
        	break;
        
        case "list":
        	
        
        
        
        }
    }

    private void addRoom(String venue, String room, String size) {
        // TODO Process the room command
    	Venue new_venue = findVenue(venue); 	
    	if(new_venue == null) {
    		new_venue = new Venue(venue);
    		Room new_room = new Room(room, size, new_venue);
        	new_venue.addRoom(new_room);
        	venues.add(new_venue);
    	}else {
    		Room new_room = new Room(room, size, new_venue);
    		new_venue.addRoom(new_room);
//    		venues.add(new_venue);
//    	 	rooms.add(new_room);
    	}
//    	System.out.println("Add a new room !");
    }

    public JSONObject request(String id, LocalDate start, LocalDate end,
            int small, int medium, int large) {
        JSONObject result = new JSONObject();

        // TODO Process the request commmand
        /*
         * create an ArrayList with all required dates
         */
        ArrayList<LocalDate> dates_request = new ArrayList<LocalDate>();
        while(!start.isAfter(end)) {
        	dates_request.add(start);
        	start = start.plusDays(1);
        }
        
        for(Venue venue : venues) {
        	if(venue.checkAvailability(dates_request, small, medium, large) == true) {
        		result = addBooking(id,venue,dates_request,small,medium,large);
        		return result;
        	}
        }
        
        result.put("status", "rejected");
       	return result;
        
    }
    
    public JSONObject change(String id, LocalDate start, LocalDate end,
            int small, int medium, int large) {
    	JSONObject result = new JSONObject();
    	Booking booking = findBooking(id);
    	if(booking != null) {
    		Booking temp = booking;
    		ArrayList<Room> rooms_booked = booking.getRooms();
    		for(Room room : rooms_booked) {
    			room.deleteBooking(booking);
    		}
    		bookings.remove(booking);
    		
    		result = request(id, start, end, small, medium, large);
    		if(result.getString("status").equals("rejected")){
    			bookings.add(temp);
    			for(Room room : rooms_booked) {
    				room.addBooking(temp);
    			}
    			return result;
    		}
    		return result;
    		
    	}
    	result.put("status", "rejected");
    	return result;
    }

    public JSONObject cancel(String id) {
    	JSONObject result = new JSONObject();
    	Booking booking = findBooking(id);
    	if(booking != null) {
    		ArrayList<Room> rooms_booked = booking.getRooms();
    		for(Room room : rooms_booked) {
    			room.deleteBooking(booking);
    		}
    		bookings.remove(booking);
    		result.put("status","success");
    		return result;
    	}
    	result.put("status", "rejected");
    	return result;
    }
    
    public static void main(String[] args) {
        VenueHireSystem system = new VenueHireSystem();

        Scanner sc = new Scanner(System.in);

        while (sc.hasNextLine()) {
            String line = sc.nextLine();
            if (!line.trim().equals("")) {
                JSONObject command = new JSONObject(line);
                system.processCommand(command);
            }
        }
        sc.close();
    }

	public ArrayList<Booking> getBookings() {
		return bookings;
	}

	public Venue findVenue(String name) {
		for(Venue venue: venues) {
			if(name.equals(venue.getName())) {
				return venue;
			}
		}
		return null;
	}
	
	public JSONObject addBooking(String id, Venue venue, ArrayList<LocalDate> dates_request, int small, int medium, int large) {
		JSONObject result = new JSONObject();
		ArrayList<Room> rooms_booked = new ArrayList<Room>();
		int small_booked = 0;
		int medium_booked = 0;
		int large_booked = 0;
		for(Room room : venue.getRooms()) {
			if(room.getSize().equals("small")) {
				if(small_booked != small) {
					if(room.checkDateAvailability(dates_request)==true) {
						rooms_booked.add(room);
						small_booked++;
					}
				}
			}
			if(room.getSize().equals("medium")) {
				if(medium_booked!=medium) {
					if(room.checkDateAvailability(dates_request)==true) {
						rooms_booked.add(room);
						medium_booked++;
					}
				}
			}
			if(room.getSize().equals("large")) {
				if(large_booked!=large) {
					if(room.checkDateAvailability(dates_request)==true) {
						rooms_booked.add(room);
						large_booked++;
					}
				}
			}
		}
		Booking new_booking = new Booking(id, rooms_booked, dates_request);
		for(Room room: rooms_booked) {
			room.addBooking(new_booking);
		}
		bookings.add(new_booking);
		
		result.put("status","success");
		result.put("venue", venue.getName());
		JSONArray rooms = new JSONArray();
//		System.out.println(rooms_booked.size());
		for(Room room: rooms_booked) {
			rooms.put(room.getName());
		}
		result.put("rooms", rooms);
		return result;
	}
	/*
	 *	find  
	 */
	public Booking findBooking(String id) {
		for(Booking booking : bookings) {
			if(booking.getId().equals(id)) {
				return booking;
			}
		}
		return null;
	}
	
}
