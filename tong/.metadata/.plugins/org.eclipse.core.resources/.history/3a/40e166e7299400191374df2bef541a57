/**
 *
 */
package unsw.venues;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Scanner;

import org.json.JSONArray;
import org.json.JSONObject;

/**
 * Venue Hire System for COMP2511.
 *
 * A basic prototype to serve as the "back-end" of a venue hire system. Input
 * and output is in JSON format.
 *
 * @author Robert Clifton-Everest
 *
 */
public class VenueHireSystem {

    /**
     * Constructs a venue hire system. Initially, the system contains no venues,
     * rooms, or bookings.
     */
	
	private static ArrayList<Venue> venues;
	private ArrayList<Room> rooms;
	private ArrayList<Booking> bookings;
	
    public VenueHireSystem() {
        // TODO Auto-generated constructor stub
    	venues = new ArrayList<Venue>();
    	rooms = new ArrayList<Room>();
    }

    private void processCommand(JSONObject json) {
        switch (json.getString("command")) {

        case "room":
            String venue = json.getString("venue");
            String room = json.getString("room");
            String size = json.getString("size");
            addRoom(venue, room, size);
            break;

        case "request":
            String id = json.getString("id");
            LocalDate start = LocalDate.parse(json.getString("start"));
            LocalDate end = LocalDate.parse(json.getString("end"));
            int small = json.getInt("small");
            int medium = json.getInt("medium");
            int large = json.getInt("large");

            JSONObject result = request(id, start, end, small, medium, large);

            System.out.println(result.toString(2));
            break;

        // TODO Implement other commands
            
        case "change":
        	String id1 = json.getString("id");
        	LocalDate start1 = LocalDate.parse(json.getString("start"));
        	LocalDate end1 = LocalDate.parse(json.getString("end"));
        	
        	break;
        case "cancell":
        
        
        
        
        case "list":
        
        
        
        
        }
    }

    private void addRoom(String venue, String room, String size) {
        // TODO Process the room command
    	Venue new_venue = findVenue(venue); 	
    	if(new_venue == null) {
    		new_venue = new Venue(venue);
    		Room new_room = new Room(room, size, new_venue);
        	new_venue.addRoom(new_room);
        	venues.add(new_venue);
    	}else {
    	Room new_room = new Room(room, size, new_venue);
    	new_venue.addRoom(new_room);
    	venues.add(new_venue);
    	// rooms.add(new_room);
    	}
    }

    public JSONObject request(String id, LocalDate start, LocalDate end,
            int small, int medium, int large) {
        JSONObject result = new JSONObject();

        // TODO Process the request commmand
        // create a list with all requested dates
        ArrayList<LocalDate> dates_request = new ArrayList<LocalDate>();
        for(LocalDate date = start; date.isBefore(end); date.plusDays(1)) {
        	dates_request.add(date);
        }
        
        result = checkAvailability()
        
        // FIXME Shouldn't always produce the same answer
        result.put("status", "success");
        result.put("venue", "Zoo");

        JSONArray rooms = new JSONArray();
        rooms.put("Penguin");
        rooms.put("Hippo");

        result.put("rooms", rooms);
        return result;
    }

    public static void main(String[] args) {
        VenueHireSystem system = new VenueHireSystem();

        Scanner sc = new Scanner(System.in);

        while (sc.hasNextLine()) {
            String line = sc.nextLine();
            if (!line.trim().equals("")) {
                JSONObject command = new JSONObject(line);
                system.processCommand(command);
            }
        }
        sc.close();
    }

	public ArrayList<Booking> getBookings() {
		return bookings;
	}

	public Venue findVenue(String name) {
		for(Venue venue: venues) {
			if(venue.getName().equals(name)) {
				return venue;
			}
		}
		return null;
	}
	
	public void addBooking(ArrayList<LocalDate> dates, int small, int medium, int large) {
		
	}
	
	public JSONObject checkAvailability(ArrayList<LocalDate> dates, int small, int medium, int large) {
		JSONObject result = new JSONObject();
		int available_small = 0;
		int available_medium = 0;
		int available_large = 0;
		for(Venue venue: venues) {
			for(Room room: venue.getRooms()) {
				if(room.getSize() == "small") {
					ArrayList<LocalDate> occupied = room.get_dates_occupied();
					if(checkDateAvailability(occupied,dates) == true) {
						available_small++;
					}
				}
				if(room.getSize() == "medium") {
					ArrayList<LocalDate> occupied = room.get_dates_occupied();
					if(checkDateAvailability(occupied,dates) == true) {
						available_medium++;
					}
				}
				if(room.getSize() == "large") {
					ArrayList<LocalDate> occupied = room.get_dates_occupied();
					if(checkDateAvailability(occupied,dates) == true) {
						available_large++;
					}
				}
			}
			
			if(available_small >= small && available_medium >= medium && available_large >= large) {
				return venue;
			}	
		}
		return result;
	}
	
	/**
	 * 
	 * @param dates_occupied
	 * @param dates_request
	 * @return check if request dates crash with occupied dates
	 */
	public boolean checkDateAvailability(ArrayList<LocalDate> dates_occupied, ArrayList<LocalDate> dates_request) {
		for(LocalDate occupied: dates_occupied) {
			for(LocalDate request: dates_request) {
				if(occupied.equals(request)) {
					return false;
				}
			}
		}
		return true;
	}
	
}
